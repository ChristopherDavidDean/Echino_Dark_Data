# Load packages
library(palaeoverse)
library(dplyr)
library(ggplot2)
library(geoscale)
library(vegan)
library(RColorBrewer)
library(divDyn)
library(patchwork)
library(chronosphere)
library(devtools)
library(tidyr)
library(vcd)
library(maditr)
library(MASS)
library(effects)
library(deeptime)
library(wesanderson)
library(countrycode)
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Create factors for later
order_ind <- c("Permian", "Pennsylvanian", "Mississippian", "Devonian",
"Silurian", "Ordovician")
# Load Museum dataset
m.dat <- read.csv("Palaeozoic_Occurrences_JRT_Finalizing_3.csv")
# Truncate columns and adjust column names
m.dat <- m.dat[,1:37]
colnames(m.dat)[17] <- "max_ma"
colnames(m.dat)[18] <- "min_ma"
m.dat[m.dat == "?"] <- NA
m.dat[m.dat == ""] <- NA
# Remove Triassic occurrences
m.dat <- m.dat %>%
filter(Period != "Triassic") %>%
filter(Period != "Triassic/Jurassic")
# Sort stages - Deeptime
data(stages)
colnames(stages)[2] <- "max_ma"
colnames(stages)[3] <- "min_ma"
stages$bin <- 1:nrow(stages)
# Assign numerical ages to each specimen
m.dat <- look_up(occdf = m.dat,
early_interval = "max_ma",
late_interval = "min_ma")
# Rename columns
names(m.dat)[names(m.dat) == "max_ma"] <- "old_max_ma"
names(m.dat)[names(m.dat) == "min_ma"] <- "old_min_ma"
names(m.dat)[names(m.dat) == "interval_max_ma"] <- "max_ma"
names(m.dat)[names(m.dat) == "interval_min_ma"] <- "min_ma"
# Remove occurrences without associated temporal data (in second dataset)
m.dat.NA <- m.dat %>%
filter(is.na(max_ma))
m.dat <- m.dat %>%
filter(!is.na(max_ma))
# Assign occurrences to bins (in second dataset)
m.dat <- bin_time(m.dat, bins = stages, method = 'all')
#Combine datasets
m.dat <- dplyr::bind_rows(m.dat, m.dat.NA)
# Order Periods by index
m.dat$Period <- as.factor(m.dat$Period)
m.dat$Period <- factor(m.dat$Period, levels = order_ind)
# Made occurrence based dataset instead of specimen based
m.dat.occ <- m.dat %>%
dplyr::select(-c(Museum.Number, Original.Order,
Preservation.Score, Description, id)) %>%
dplyr::distinct()
# Load Paleozoic echinoid dataset
pb.dat <- read.csv("pbdb_echinoids.csv", skip = 18)
# Assign occurrences to bins
pb.dat <- bin_time(pb.dat, bins = stages, method = 'all')
# Covert country code into full words
pb.dat$Country <- countrycode(sourcevar = pb.dat$cc, "eurostat", "country.name")
pb.dat$Country[is.na(pb.dat$Country) == TRUE] <- "Greece"
pb.dat$Country
table(pb.dat$Country )
table(m.dat$Country )
# Load all Palaeozoic occurrences
pb.all <- read.csv("all_palaeozoic.csv", skip = 18)
# Assign occurrences to bins
pb.all <- bin_time(pb.all, bins = stages, method = 'all')
bins
stages
View(pb.all)
View(pb.all)
nrow(stage)
nrow(stages)
stages(nrow(stages), 2)
stages[nrow(stages), 2]
# Assign occurrences to bins
pb.all <- pb.all %>%
filter(max_age < stages[nrow(stages), 2])
# Assign occurrences to bins
pb.all <- pb.all %>%
filter(max_ma < stages[nrow(stages), 2])
pb.all <- bin_time(pb.all, bins = stages, method = 'all')
View(pb.all)
# Creates a raster of chosen resolution, and attaches associated grid cell IDs to occurrences/collections
get_grid <- function(data, res, e, r = "N"){ # data is first output from combine_data (fossil.colls). Res is chosen resolution in degrees
if (class(r) == "character"){
r <- raster(res = res, val = 1, ext = e) # Value must be added because extract uses values
r <<- r
}
crs <- r@crs
xy <- SpatialPointsDataFrame(cbind.data.frame(data$lng, data$lat), data, proj4string = crs)
Final <- raster::extract(r, xy, sp = TRUE, cellnumbers = TRUE)
Final <- as.data.frame(Final)
singletons <- Final %>%
dplyr::select(cells, collection_no) %>%
dplyr::distinct() %>%
dplyr::group_by(cells) %>%
dplyr::summarize(Coll_count = n())
singletons$Coll_count[singletons$Coll_count == 1] <- "Singleton"
singletons$Coll_count[singletons$Coll_count != "Singleton"] <- "Non-singleton"
Final <- left_join(Final, singletons, by = "cells")
stack_name <- paste(data, "_binned", sep = "")
assign(stack_name, Final, envir = .GlobalEnv)
}
# Use get_grid() on each dataset
get_grid(m.dat.occ, res, e)
# Set resolution and extent
e <<- extent(-180, 180, -90, 90)
res <- 1
# Use get_grid() on each dataset
get_grid(m.dat.occ, res, e)
View(m.dat.occ)
# Use get_grid() on each dataset
m.dat.occ$lat <- as.numeric(m.dat.occ$lat)
m.dat.occ$lng <- as.numeric(m.dat.occ$lng)
get_grid(m.dat.occ, res, e)
View(m.dat.occ)
m.dat.occ <- m.dat.occ %>%
filter(!is.na(lat) && !is.nat(lng))
m.dat.occ <- m.dat.occ %>%
filter(!is.na(lat) & !is.nat(lng))
m.dat.occ <- m.dat.occ %>%
filter(!is.na(lat) & !is.na(lng))
get_grid(m.dat.occ, res, e)
m.dat.occ <- m.dat.occ %>%
filter(!is.na(lat) & !is.na(lng)) %>%
rename(Locality = collection_no)
m.dat.occ
?rename
m.dat.occ <- m.dat.occ %>%
filter(!is.na(lat) & !is.na(lng)) %>%
rename(collection_no = Locality)
get_grid(m.dat.occ, res, e)
# Creates a raster of chosen resolution, and attaches associated grid cell IDs to occurrences/collections
get_grid <- function(data, res, e, r = "N"){ # data is first output from combine_data (fossil.colls). Res is chosen resolution in degrees
if (class(r) == "character"){
r <- raster(res = res, val = 1, ext = e) # Value must be added because extract uses values
r <<- r
}
crs <- r@crs
xy <- SpatialPointsDataFrame(cbind.data.frame(data$lng, data$lat), data, proj4string = crs)
Final <- raster::extract(r, xy, sp = TRUE, cellnumbers = TRUE)
Final <- as.data.frame(Final)
singletons <- Final %>%
dplyr::select(cells, collection_no) %>%
dplyr::distinct() %>%
dplyr::group_by(cells) %>%
dplyr::summarize(Coll_count = n())
singletons$Coll_count[singletons$Coll_count == 1] <- "Singleton"
singletons$Coll_count[singletons$Coll_count != "Singleton"] <- "Non-singleton"
Final <- left_join(Final, singletons, by = "cells")
stack_name <- paste(deparse(data), "_binned", sep = "")
assign(stack_name, Final, envir = .GlobalEnv)
}
get_grid(m.dat.occ, res, e)
# Creates a raster of chosen resolution, and attaches associated grid cell IDs to occurrences/collections
get_grid <- function(data, res, e, r = "N"){ # data is first output from combine_data (fossil.colls). Res is chosen resolution in degrees
if (class(r) == "character"){
r <- raster(res = res, val = 1, ext = e) # Value must be added because extract uses values
r <<- r
}
crs <- r@crs
xy <- SpatialPointsDataFrame(cbind.data.frame(data$lng, data$lat), data, proj4string = crs)
Final <- raster::extract(r, xy, sp = TRUE, cellnumbers = TRUE)
Final <- as.data.frame(Final)
singletons <- Final %>%
dplyr::select(cells, collection_no) %>%
dplyr::distinct() %>%
dplyr::group_by(cells) %>%
dplyr::summarize(Coll_count = n())
singletons$Coll_count[singletons$Coll_count == 1] <- "Singleton"
singletons$Coll_count[singletons$Coll_count != "Singleton"] <- "Non-singleton"
Final <- left_join(Final, singletons, by = "cells")
stack_name <- paste(deparse(name(data)), "_binned", sep = "")
assign(stack_name, Final, envir = .GlobalEnv)
}
get_grid(m.dat.occ, res, e)
?names()
?names
# Creates a raster of chosen resolution, and attaches associated grid cell IDs to occurrences/collections
get_grid <- function(data, res, e, r = "N"){ # data is first output from combine_data (fossil.colls). Res is chosen resolution in degrees
if (class(r) == "character"){
r <- raster(res = res, val = 1, ext = e) # Value must be added because extract uses values
r <<- r
}
crs <- r@crs
xy <- SpatialPointsDataFrame(cbind.data.frame(data$lng, data$lat), data, proj4string = crs)
Final <- raster::extract(r, xy, sp = TRUE, cellnumbers = TRUE)
Final <- as.data.frame(Final)
singletons <- Final %>%
dplyr::select(cells, collection_no) %>%
dplyr::distinct() %>%
dplyr::group_by(cells) %>%
dplyr::summarize(Coll_count = n())
singletons$Coll_count[singletons$Coll_count == 1] <- "Singleton"
singletons$Coll_count[singletons$Coll_count != "Singleton"] <- "Non-singleton"
Final <- left_join(Final, singletons, by = "cells")
stack_name <- paste(deparse(names(data)), "_binned", sep = "")
assign(stack_name, Final, envir = .GlobalEnv)
}
get_grid(m.dat.occ, res, e)
# Creates a raster of chosen resolution, and attaches associated grid cell IDs to occurrences/collections
get_grid <- function(data, res, e, r = "N"){ # data is first output from combine_data (fossil.colls). Res is chosen resolution in degrees
if (class(r) == "character"){
r <- raster(res = res, val = 1, ext = e) # Value must be added because extract uses values
r <<- r
}
crs <- r@crs
xy <- SpatialPointsDataFrame(cbind.data.frame(data$lng, data$lat), data, proj4string = crs)
Final <- raster::extract(r, xy, sp = TRUE, cellnumbers = TRUE)
Final <- as.data.frame(Final)
singletons <- Final %>%
dplyr::select(cells, collection_no) %>%
dplyr::distinct() %>%
dplyr::group_by(cells) %>%
dplyr::summarize(Coll_count = n())
singletons$Coll_count[singletons$Coll_count == 1] <- "Singleton"
singletons$Coll_count[singletons$Coll_count != "Singleton"] <- "Non-singleton"
Final <- left_join(Final, singletons, by = "cells")
stack_name <- paste(deparse(substitute(data)), "_binned", sep = "")
assign(stack_name, Final, envir = .GlobalEnv)
}
get_grid(m.dat.occ, res, e)
# Creates a raster of chosen resolution, and attaches associated grid cell IDs to occurrences/collections
get_grid <- function(data, res, e, r = "N"){ # data is first output from combine_data (fossil.colls). Res is chosen resolution in degrees
if (class(r) == "character"){
r <- raster(res = res, val = 1, ext = e) # Value must be added because extract uses values
r <<- r
}
crs <- r@crs
xy <- SpatialPointsDataFrame(cbind.data.frame(data$lng, data$lat), data, proj4string = crs)
Final <- raster::extract(r, xy, sp = TRUE, cellnumbers = TRUE)
Final <- as.data.frame(Final)
singletons <- Final %>%
dplyr::select(cells, collection_no) %>%
dplyr::distinct() %>%
dplyr::group_by(cells) %>%
dplyr::summarize(Coll_count = n())
singletons$Coll_count[singletons$Coll_count == 1] <- "Singleton"
singletons$Coll_count[singletons$Coll_count != "Singleton"] <- "Non-singleton"
Final <- left_join(Final, singletons, by = "cells")
print(deparse(substitute(data)))
stack_name <- paste(deparse(substitute(data)), "_binned", sep = "")
assign(stack_name, Final, envir = .GlobalEnv)
}
get_grid(m.dat.occ, res, e)
# Creates a raster of chosen resolution, and attaches associated grid cell IDs to occurrences/collections
get_grid <- function(data, res, e, r = "N"){ # data is first output from combine_data (fossil.colls). Res is chosen resolution in degrees
if (class(r) == "character"){
r <- raster(res = res, val = 1, ext = e) # Value must be added because extract uses values
r <<- r
}
crs <- r@crs
xy <- SpatialPointsDataFrame(cbind.data.frame(data$lng, data$lat), data, proj4string = crs)
Final <- raster::extract(r, xy, sp = TRUE, cellnumbers = TRUE)
Final <- as.data.frame(Final)
singletons <- Final %>%
dplyr::select(cells, collection_no) %>%
dplyr::distinct() %>%
dplyr::group_by(cells) %>%
dplyr::summarize(Coll_count = n())
singletons$Coll_count[singletons$Coll_count == 1] <- "Singleton"
singletons$Coll_count[singletons$Coll_count != "Singleton"] <- "Non-singleton"
Final <- left_join(Final, singletons, by = "cells")
print(deparse(substitute(data)))
stack_name <- paste(deparse(substitute(data)), ".binned", sep = "")
assign(stack_name, Final, envir = .GlobalEnv)
}
