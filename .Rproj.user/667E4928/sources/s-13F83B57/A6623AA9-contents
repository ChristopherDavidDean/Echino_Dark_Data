################################################################################
#                                                                              #
# ECHINOID TAPHONOMY                                                           #
# J. Thompson, C.D. Dean, M. Ford, T.A.M. Ewin.                                #
# Code by C. D. Dean, started 29.09.23                                         #
#                                                                              #
################################################################################

#================================= SETUP =======================================

# Load packages
library(palaeoverse)
library(dplyr)
library(ggplot2)
library(geoscale)
library(vegan)
library(RColorBrewer)
library(divDyn)
library(patchwork)
library(chronosphere)
library(devtools)
library(tidyr)
library(vcd)
library(maditr)
library(MASS)
library(effects)
library(deeptime)
library(wesanderson)

# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))

# Load data
Total <- read.csv("Palaeozoic_Occurrences_JRT_Finalizing_2.csv")
Total <- Total[,1:34]
colnames(Total)[14] <- "max_ma"
colnames(Total)[15] <- "min_ma"
Total[Total == "?"] <- NA
Total[Total == ""] <- NA

# Remove occurrences without taph. grade and Triassic occurrences
Total <- Total %>%
  filter(Period != "Triassic") %>%
  filter(Period != "Triassic/Jurassic") %>%
  filter(is.na(Preservation.Score) == F) 

# Sort stages - Deeptime
data(stages)
colnames(stages)[2] <- "max_ma"
colnames(stages)[3] <- "min_ma"
stages$bin <- 1:nrow(stages)

# Assign numerical ages to each specimen
Total <- look_up(occdf = Total, early_interval = "max_ma", late_interval = "min_ma")

# Rename columns
names(Total)[names(Total) == "max_ma"] <- "old_max_ma"
names(Total)[names(Total) == "min_ma"] <- "old_min_ma"
names(Total)[names(Total) == "interval_max_ma"] <- "max_ma"
names(Total)[names(Total) == "interval_min_ma"] <- "min_ma"

# Assign occurrences to bins
Total <- bin_time(Total, bins = stages, method = 'all')

# Create factors for later
order_ind <- c("Permian", "Carboniferous", "Devonian", "Silurian", "Ordovician")
Total$Period <- as.factor(Total$Period)
Total$Period <- factor(Total$Period, levels = order_ind)

#========================= BAR PLOTS AND CHI SQUARED ===========================

#===== LITHOLOGY =====

# Make plot of preservation scores against lithology, NA values removed
l.Total <- Total %>%
  filter(is.na(Lithology) == F)

ggplot(l.Total) +
  aes(x = Preservation.Score, fill = Lithology) +
  geom_bar() +
  scale_fill_manual(values=wes_palette("Zissou1")) +
  ylab("Frequency") +
  xlab("Preservation Score") +
  #coord_flip() +
  theme_bw() +
  scale_y_continuous(expand = c(0,0), limits = c(0,650))

ggplot(l.Total) +
  aes(x = Preservation.Score, fill = Lithology) +
  geom_bar(position = 'fill') +
  scale_fill_manual(values=wes_palette("Zissou1")) +
  ylab("Proportion of total") +
  xlab("Preservation Score") +
  theme_bw() +
 # coord_flip() +
  scale_y_continuous(expand = c(0,0), limits = c(0,1.01))

# Format into table and run Chi Squared test
test <- chisq.test(table(l.Total$Preservation.Score, l.Total$Lithology))
test
test$expected # compare against what the test would have expected

# Mosaic plot
mosaic(~ Preservation.Score + Lithology,
       direction = c("v", "h"),
       data = l.Total,
       labeling_args = list(
                            set_varnames = c(Preservation.Score = "Preservation Score", 
                                             Grain.Size = "Lithology")),
       shade = TRUE
)

#===== GRAIN SIZE =====
# Make dataset for grain size
g.Total <- Total %>%
  filter(is.na(Grain.Size) == F) 

# Assign specific grain size categories into either "Fine Grained" or "Coarse Grained"
for (l in 1:nrow(g.Total)){
  if (g.Total$Grain.Size[l]=="Fine Grained"  | g.Total$Grain.Size[l]=="Slate" |
      g.Total$Grain.Size[l] =="Chert" | g.Total$Grain.Size[l] =="Mudstone/grainstone" |
      g.Total$Grain.Size[l]=="Shale" | g.Total$Grain.Size[l]=="Wackestone" | g.Total$Grain.Size[l]=="Mudstone" | 
      g.Total$Grain.Size[l]=="Siltstone" | g.Total$Grain.Size[l]== "mudstone/wackestone"){
    g.Total$Grain.Size[l]<-"Fine Grained"
  }
  else if (g.Total$Grain.Size[l]=="Grainstone" | g.Total$Grain.Size[l] == "Packstone"| 
           g.Total$Grain.Size[l]=="Sandstone" |
           g.Total$Grain.Size[l] == "Coquina" |
           g.Total$Grain.Size[l] == "Boundstone"){ 
    g.Total$Grain.Size[l]<-"Coarse Grained"
  }
  else{
    g.Total$Grain.Size[l] <- NA
  }
}

# Remove remaining specimens without grain size
g.Total <- g.Total %>%
  filter(is.na(Grain.Size) == F) 

# Plot
ggplot(g.Total) +
  aes(x = Preservation.Score, fill = Grain.Size) +
  geom_bar() +
  scale_fill_manual(values=wes_palette("Zissou1")) +
  ylab("Frequency") +
  xlab("Preservation Score") +
  guides(fill=guide_legend(title="Grain size")) +
  theme_bw() +
#  coord_flip() +
  scale_y_continuous(expand = c(0,0), limits = c(0,580))

ggplot(g.Total) +
  aes(x = Preservation.Score, fill = Grain.Size) +
  geom_bar(position = 'fill') +
  scale_fill_manual(values=wes_palette("Zissou1")) +
  ylab("Proportion of total") +
 # coord_flip() +
  xlab("Preservation Score") +
  guides(fill=guide_legend(title="Grain size")) +
  theme_bw() +
  scale_y_continuous(expand = c(0,0), limits = c(0,1.01))

# Format into table and run Chi Squared test
test <- chisq.test(table(g.Total$Preservation.Score, g.Total$Grain.Size))
test
test$expected # compare against what the test would have expected

# Mosaic plot
mosaic(~ Preservation.Score + Grain.Size,
       direction = c("v", "h"),
       data = g.Total,
       labeling_args = list(just_labels = "right", 
                            set_varnames = c(Preservation.Score = "Preservation Score", 
                                             Grain.Size = "Grain size")),
       shade = TRUE
)


#===== FAMILY =====
# Make plot of preservation scores against family
ggplot(Total) +
  aes(x = Preservation.Score, fill = Family) +
  geom_bar()
ggplot(Total) +
  aes(x = Preservation.Score, fill = Family) +
  geom_bar(position = 'fill')

# Make plot of preservation scores against family, NA values removed
f.Total <- Total %>%
  filter(is.na(Family) == F)%>%
  filter(Family != 'Triadotiaridae') %>%
  filter(Family != 'Bothriocidaridae') %>%
  filter(Family != 'Cravenechinidae')

ggplot(f.Total) +
  aes(x = Preservation.Score, fill = Family) +
  geom_bar(position = 'fill') +
  ylab("Frequency") +
  ylab("Proportion of total") +
  xlab("Preservation Score") +
  scale_fill_manual(values=c(wes_palette("Royal1"), 
                             wes_palette("Zissou1"), 
                             wes_palette("Royal2"))) +
  theme_bw() +
  scale_y_continuous(expand = c(0,0), limits = c(0,1.01))

ggplot(f.Total) +
  aes(x = Preservation.Score, fill = Family) +
  geom_bar() +
  ylab("Frequency") +
  xlab("Preservation Score") +
  scale_fill_manual(values=c(wes_palette("Royal1"), 
                             wes_palette("Zissou1"), 
                             wes_palette("Royal2"))) +
  theme_bw() +
  scale_y_continuous(expand = c(0,0), limits = c(0,600))


# Format into table and run Chi Squared test
test <- chisq.test(table(f.Total$Preservation.Score, f.Total$Family))
test
test$expected # compare against what the test would have expected

#===== TIME =====
# Make plot of preservation scores against time period
df <- palaeoverse::GTS2020
df <- df[155:159,]
myColours <- df$colour

names(myColours) <- levels(Total$Period)
custom_colours <- scale_colour_manual(name = "Period", values = myColours[1:5])

# Plot preservation score per time period
ggplot(Total) +
  aes(x = Preservation.Score, fill = Period) +
  geom_bar() +
  scale_fill_manual("Legend", values = myColours) +
  ylab("Frequency") +
  xlab("Preservation Score") +
  guides(fill=guide_legend(title="Period")) +
  theme_bw() +
  scale_y_continuous(expand = c(0,0), limits = c(0,1000))

# Plot proportional preservation score per time period
ggplot(Total) +
  aes(x = Preservation.Score, fill = Period) +
  geom_bar(position = 'fill') +
  scale_fill_manual("Legend", values = myColours) +
  ylab("Proportion of total") +
  guides(fill=guide_legend(title="Period")) +
  xlab("Preservation Score") +
  theme_bw() +
  scale_y_continuous(expand = c(0,0), limits = c(0,1.01))


# Combine info into table, and plot through time
test <- as.data.frame(table(Total$Preservation.Score, Total$Period))
names(test) <- c("Preservation.Score", "interval_name", "Freq")
test <- merge(test, df, by = 'interval_name')
test$Preservation.Score <- factor(test$Preservation.Score, levels = c("5", "4", "3", "2", "1"))

a <- ggplot(test, aes(x=mid_ma, y=Freq, fill=Preservation.Score)) + 
  geom_area(position = 'fill') +
  scale_x_reverse() +
  theme_bw() +
  ylab("Frequency") +
  guides(fill=guide_legend(title="Preservation score")) +
  xlab("Time (Ma)") +
  scale_fill_manual(values=(wes_palette("Zissou1")))
gggeo_scale(a)

test <- as.data.frame(table(Total$Preservation.Score, Total$Period))
names(test) <- c("Preservation.Score", "interval_name", "Freq")
test <- merge(test, df, by = 'interval_name')
test$Preservation.Score <- factor(test$Preservation.Score, levels = c("5", "4", "3", "2", "1"))
a <- ggplot(test, aes(x=mid_ma, y=Freq, fill=Preservation.Score)) + 
  geom_area() +
  scale_x_reverse() +
  theme_bw() +
  guides(fill=guide_legend(title="Preservation score")) +
  ylab("Frequency") +
  xlab("Time (Ma)") +
  scale_fill_manual(values=(wes_palette("Zissou1")))
gggeo_scale(a)


# Format into table and run Chi Squared test
test <- chisq.test(table(Total$Preservation.Score, Total$Period))
test
test$expected # compare against what the test would have expected

# Mosaic plot
mosaic(~ Preservation.Score + Period,
       direction = c("v", "h"),
       data = Total,
       shade = TRUE, 
       labeling_args = list(rot_labels = c(0), just_labels = "right", 
                            set_varnames = c(Preservation.Score = "Preservation Score", 
                                             Period = ""))
)

# Compile into table and plot through time
test <- as.data.frame(table(Total$Preservation.Score, Total$bin_midpoint))
names(test) <- c("Preservation.Score", "mid_ma", "Freq")
test$mid_ma <- as.numeric(as.character(test$mid_ma))
test$Preservation.Score <- factor(test$Preservation.Score, levels = c("5", "4", "3", "2", "1"))

a <- ggplot(test, aes(x=mid_ma, y=Freq, fill=Preservation.Score)) + 
  geom_area() +
  scale_x_reverse() +
  theme_bw() +
  guides(fill=guide_legend(title="Preservation score")) +
  ylab("Frequency") +
  xlab("Time (Ma)") +
  scale_fill_manual(values=(wes_palette("Zissou1")))
gggeo_scale(a)


# Compile into table and plot through time
test <- as.data.frame(table(Total$Lithology, Total$bin_midpoint))
names(test) <- c("Lithology", "mid_ma", "Freq")
test$mid_ma <- as.numeric(as.character(test$mid_ma))

a <- ggplot(test, aes(x=mid_ma, y=Freq, fill=Lithology)) + 
  geom_area() +
  scale_x_reverse() +
  theme_bw() +
  guides(fill=guide_legend(title="Lithology")) +
  ylab("Frequency") +
  xlab("Time (Ma)") +
  scale_fill_manual(values=(wes_palette("Zissou1")))
gggeo_scale(a)

# Compile into table and plot through time
test <- as.data.frame(table(g.Total$Grain.Size, g.Total$bin_midpoint))
names(test) <- c("Grain.Size", "mid_ma", "Freq")
test$mid_ma <- as.numeric(as.character(test$mid_ma))

a <- ggplot(test, aes(x=mid_ma, y=Freq, fill=Grain.Size)) + 
  geom_area() +
  scale_x_reverse() +
  theme_bw() +
  guides(fill=guide_legend(title="Grain size")) +
  ylab("Frequency") +
  xlab("Time (Ma)") +
  scale_fill_manual(values=(wes_palette("Zissou1")))
gggeo_scale(a)


# Compile into table and plot through time
test <- as.data.frame(table(f.Total$Family, f.Total$bin_midpoint))
names(test) <- c("Family", "mid_ma", "Freq")
test$mid_ma <- as.numeric(as.character(test$mid_ma))

a <- ggplot(test, aes(x=mid_ma, y=Freq, fill=Family)) + 
  geom_area() +
  scale_x_reverse() +
  theme_bw() +
  guides(fill=guide_legend(title="Family")) +
  ylab("Frequency") +
  xlab("Time (Ma)") +
  scale_fill_manual(values=c(wes_palette("Royal1"), 
                             wes_palette("Zissou1"), 
                             wes_palette("Royal2"))) 
gggeo_scale(a)

#=========================== JACCARD SIMILARITY ================================

#===== Preservation score v. genera =====
# Filter to genera and select appropriate columns
test <- Total %>%
  dplyr::filter(is.na(Genus) == F) %>%
  dplyr::select(Genus, Preservation.Score) %>%
  group_by_all() %>%
  summarize(Count = n())

# Transform to preservation.score by genus matrix
test <- dcast(test,
              Preservation.Score ~ Genus,
              value.var = "Count", fill = 0)
test <- as.data.frame(test)
test2 <- test[,-1]
rownames(test2) <- test[,1]

# Make binary (presence/absence)
binary <- test2
binary[binary > 0] <- 1

# Get combinations
combos <- combn(rownames(binary), 2)

# Loop through combos
for(a in 1:ncol(combos)){
  temp <- binary[c(combos[1, a],combos[2, a]),]
  temp <- vegdist(temp, method = "jaccard")
  if(a == 1){
    temp.res <- c(paste(combos[1, a], "v", combos[2, a], sep = ""), as.numeric(temp))
  } else{
    temp.res <- rbind(temp.res, c(paste(combos[1, a], "v", combos[2, a], sep = ""), as.numeric(temp)))
  }
}

temp.res <- as.data.frame(temp.res)
temp.res <- cbind(temp.res, ncol(binary))
colnames(temp.res) <- c("Test", "Score", "Genera")
temp.res$Test <- factor(temp.res$Test, levels = c("1v2", "2v3", "3v4", "4v5", "1v3", "2v4", "3v5", "1v4", "2v5", "1v5"))

temp.res <- with(temp.res, temp.res[order(Test, Score, Genera),])


#===== Preservation score v. genera through time =====

test <- Total %>%
  dplyr::filter(is.na(Genus) == F) %>%
  dplyr::select(Genus, Preservation.Score, Period) 

for(t in unique(test$Period)) {
  # Only select period of interest
  temp_test <- test %>%
    dplyr::filter(Period == t) %>%
    dplyr::select(Preservation.Score, Genus) %>%
    group_by_all() %>%
    summarize(Count = n())
  
  # Transform to preservation.score by genus matrix
  temp_test <- dcast(temp_test,
                Preservation.Score ~ Genus,
                value.var = "Count", fill = 0)
  temp_test <- as.data.frame(temp_test)
  temp_test2 <- temp_test[,-1]
  rownames(temp_test2) <- temp_test[,1]
  
  # Make binary (presence/absence)
  binary <- temp_test2
  binary[binary > 0] <- 1
  
  # Get combinations
  combos <- combn(rownames(binary), 2)
  
  # Loop through combos
  for(a in 1:ncol(combos)){
    temp <- binary[c(combos[1, a],combos[2, a]),]
    temp <- vegdist(temp, method = "jaccard")
    if(a == 1){
      temp.res <- c(paste(combos[1, a], "v", combos[2, a], sep = ""), as.numeric(temp))
    } else{
      temp.res <- rbind(temp.res, c(paste(combos[1, a], "v", combos[2, a], sep = ""), as.numeric(temp)))
    }
  }
  temp.res <- as.data.frame(temp.res)
  temp.res <- cbind(temp.res, t, ncol(binary))
  colnames(temp.res) <- c("Test", "Score", "interval_name", "Genera")
  
  if(which(t == unique(test$Period))[[1]] == 1){
    results <- temp.res
  }else{
    results <- rbind(results, temp.res)
  }
}

df <- palaeoverse::GTS2020
df <- df[155:159,]
results <- df %>%
  dplyr::select(interval_name, mid_ma) %>%
  merge(results, by = "interval_name")
results$Score <- as.numeric(results$Score)

order_ind <- c("1v2", "2v3", "3v4", "4v5", "1v3", "2v4", "3v5", "1v4", "2v5", "1v5")
results$Test <- as.factor(results$Test)
results$Test <- factor(results$Test, levels = order_ind)

for(i in 1:5){
  test <- results %>%
    filter(grepl(i,Test) == T)
  a <- ggplot(test, aes(x=mid_ma, y=Score)) + 
    geom_line(aes(colour = Test, linetype = Test)) +
    scale_x_reverse() +
    theme_bw() +
    ylab("Jaccard Similarity") +
    xlab("Time (Ma)") +
    geom_point(aes(color = Test))
  
  a <- a + scale_colour_viridis_d()
  
  assign(paste("p", i, sep = ""), gggeo_scale(a), envir = .GlobalEnv)
  
}

ggarrange2(p1, p2, p3, p4, p5, ncol =3, nrow =2)

a <- ggplot(results, aes(x=mid_ma, y=Score)) + 
  geom_line(aes(colour = Test, linetype = Test)) +
  scale_x_reverse() +
  theme_bw() +
  ylab("Jaccard Similarity") +
  xlab("Time (Ma)") +
  geom_point(aes(color = Test))

a <- a + scale_colour_viridis_d()
  
gggeo_scale(a)

#===== Lithology v. genera =====

# Filter to genera and select appropriate columns
test <- l.Total %>%
  dplyr::filter(is.na(Genus) == F) %>% 
  dplyr::select(Genus, Lithology) %>%
  group_by_all() %>%
  summarize(Count = n())

# Transform to preservation.score by genus matrix
test <- dcast(test,
              Lithology ~ Genus,
              value.var = "Count", fill = 0)
test <- as.data.frame(test)
test2 <- test[,-1]
rownames(test2) <- test[,1]

# Make binary (presence/absence)
binary <- test2
binary[binary > 0] <- 1

## 1 vs. 2 ##
lithology.jacc <- binary[c(1,2),]
lithology.jacc <- vegdist(lithology.jacc, method = "jaccard")

test <- l.Total %>%
  dplyr::filter(is.na(Genus) == F) %>%
  dplyr::filter(is.na(Lithology) == F) %>%
  dplyr::select(Genus, Lithology, Period) 

for(t in unique(test$Period)) {
  
  # Only select period of interest
  temp_test <- test %>%
    dplyr::filter(Period == t) %>%
    dplyr::select(Lithology, Genus) %>%
    group_by_all() %>%
    summarize(Count = n())
  
  
  # Transform to preservation.score by genus matrix
  temp_test <- dcast(temp_test,
                     Lithology ~ Genus,
                     value.var = "Count", fill = 0)
  temp_test <- as.data.frame(temp_test)
  temp_test2 <- temp_test[,-1]
  rownames(temp_test2) <- temp_test[,1]
  
  # Make binary (presence/absence)
  binary <- temp_test2
  binary[binary > 0] <- 1
  
  if(nrow(binary) == 1){
    temp = NA
    temp.res <- cbind(temp, t, ncol(binary))
    colnames(temp.res) <- c("Score", "interval_name", "Genera")
    
    if(which(t == unique(test$Period))[[1]] == 1){
      results <- temp.res
    }else{
      results <- rbind(results, temp.res)
    }
    next
  }

  temp <- vegdist(binary, method = "jaccard")
  temp.res <- cbind(temp, t, ncol(binary))
  colnames(temp.res) <- c("Score", "interval_name", "Genera")
  
  if(which(t == unique(test$Period))[[1]] == 1){
    results <- temp.res
  }else{
    results <- rbind(results, temp.res)
  }
}

df <- palaeoverse::GTS2020
df <- df[155:159,]
results <- df %>%
  dplyr::select(interval_name, mid_ma) %>%
  merge(results, by = "interval_name")
results$Score <- as.numeric(results$Score)

a <- ggplot(results, aes(x=mid_ma, y=Score)) + 
  geom_line() +
  scale_x_reverse() +
  theme_bw() +
  ylab("Jaccard Similarity") +
  xlab("Time (Ma)") +
  geom_point() +
  scale_y_continuous(expand = c(0,0), limits = c(0,1.05))

gggeo_scale(a)

#===== Lithology v. grainsize =====

# Filter to genera and select appropriate columns
test <- g.Total %>%
  dplyr::filter(is.na(Genus) == F) %>% 
  dplyr::select(Genus, Grain.Size) %>%
  group_by_all() %>%
  summarize(Count = n())

# Transform to preservation.score by genus matrix
test <- dcast(test,
              Grain.Size ~ Genus,
              value.var = "Count", fill = 0)
test <- as.data.frame(test)
test2 <- test[,-1]
rownames(test2) <- test[,1]

# Make binary (presence/absence)
binary <- test2
binary[binary > 0] <- 1

## 1 vs. 2 ##
lithology.jacc <- binary[c(1,2),]
lithology.jacc <- vegdist(lithology.jacc, method = "jaccard")

test <- g.Total %>%
  dplyr::filter(is.na(Genus) == F) %>%
  dplyr::select(Genus, Grain.Size, Period) 

for(t in unique(test$Period)) {
  
  # Only select period of interest
  temp_test <- test %>%
    dplyr::filter(Period == t) %>%
    dplyr::select(Grain.Size, Genus) %>%
    group_by_all() %>%
    summarize(Count = n())
  
  
  # Transform to preservation.score by genus matrix
  temp_test <- dcast(temp_test,
                     Grain.Size ~ Genus,
                     value.var = "Count", fill = 0)
  temp_test <- as.data.frame(temp_test)
  temp_test2 <- temp_test[,-1]
  rownames(temp_test2) <- temp_test[,1]
  
  # Make binary (presence/absence)
  binary <- temp_test2
  binary[binary > 0] <- 1
  
  if(nrow(binary) == 1){
    temp = NA
    temp.res <- cbind(temp, t, ncol(binary))
    colnames(temp.res) <- c("Score", "interval_name", "Genera")
    
    if(which(t == unique(test$Period))[[1]] == 1){
      results <- temp.res
    }else{
      results <- rbind(results, temp.res)
    }
    next
  }
  
  temp <- vegdist(binary, method = "jaccard")
  temp.res <- cbind(temp, t, ncol(binary))
  colnames(temp.res) <- c("Score", "interval_name", "Genera")
  
  if(which(t == unique(test$Period))[[1]] == 1){
    results <- temp.res
  }else{
    results <- rbind(results, temp.res)
  }
}


df <- palaeoverse::GTS2020
df <- df[155:159,]
results <- df %>%
  dplyr::select(interval_name, mid_ma) %>%
  merge(results, by = "interval_name")
results$Score <- as.numeric(results$Score)

a <- ggplot(results, aes(x=mid_ma, y=Score)) + 
  geom_line() +
  scale_x_reverse() +
  theme_bw() +
  ylab("Jaccard Similarity") +
  xlab("Time (Ma)") +
  geom_point() +
  scale_y_continuous(expand = c(0,0), limits = c(0,1.05))

gggeo_scale(a)

#================================== OLR ========================================

Total$Preservation.Score <- factor(Total$Preservation.Score, levels = c("1", "2", "3", "4", "5"), ordered = TRUE)
g.Total$Preservation.Score <- factor(g.Total$Preservation.Score, levels = c("1", "2", "3", "4", "5"), ordered = TRUE)


data <- g.Total

# Set up modelling
samplesize <- 0.60*nrow(data)
index <- sample(seq_len(nrow(data)), size = samplesize)
#Creating training and test set 
datatrain <- data[index,]
table(datatrain$Lithology, datatrain$Grain.Size)
table(datatrain$Lithology, datatrain$Preservation.Score)
table(datatrain$Grain.Size, datatrain$Preservation.Score, datatrain$Lithology)

datatest <- data[-index,]

m <- polr(Preservation.Score ~ Lithology + Grain.Size + Lithology*Grain.Size, 
          data = datatrain, Hess=TRUE)
summary(m)
m <- polr(Preservation.Score ~ Lithology + Grain.Size, # Best model
          data = datatrain, Hess=TRUE)
summary(m)
m <- polr(Preservation.Score ~ Lithology,
          data = datatrain, Hess=TRUE)
summary(m)
m <- polr(Preservation.Score ~ Grain.Size,
          data = datatrain, Hess=TRUE)
summary(m)
m <- polr(Preservation.Score ~ 1,
          data = datatrain, Hess=TRUE)
summary(m)


## view a summary of the model
summary(m)
(ctable <- coef(summary(m)))
## calculate and store p values
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2

## combined table
(ctable <- cbind(ctable, "p value" = p))
ci <- confint.default(m)

## odds ratios
exp(coef(m))

## OR and CI
test <-exp(cbind(OR = coef(m), ci))

# Model quality
predictPreservation.Score <- predict(m,datatest)
table(datatest$Preservation.Score, predictPreservation.Score)
predictPreservation.Score <- as.character(predictPreservation.Score)
predictPreservation.Score[is.na(predictPreservation.Score)] <- "0"
mean(as.character(datatest$Preservation.Score) != as.character(predictPreservation.Score))

m <- polr(Preservation.Score ~ Lithology + Grain.Size, # Best model
          data = g.Total, Hess=TRUE)

plot(Effect(focal.predictors = c("Grain.Size", "Lithology"),m),
     main="Ordinal logistic regression; lithology + grain size",
     axes = list(y=list(lab="Preservation Score (probability)")))
plot(Effect(focal.predictors = c("Lithology", "Grain.Size"),m), 
     main="Ordinal logistic regression; lithology + grain size",
     axes = list(y=list(lab="Preservation Score (probability)")))

#============================ CORRELATIONS =====================================

#=============================== PBDB DATA =====================================

pbdb <- read.csv("pbdb_echinoids.csv", skip = 18)
pbdb <- bin_time(pbdb, bins = stages, method = "all")

pbdb <- pbdb %>%
  filter(identified_rank == "genus" | identified_rank == "species")

chang.pb <- pbdb %>%
  filter(bin_assignment == '55')

chang.t <- Total %>%
  filter(bin_assignment == '55')


bin_info <- binstat(pbdb, tax="genus", bin="bin_assignment", 
                    coll = 'collection_no')
bin_info[bin_info==0] <- NA

colnames(bin_info)[1] <- "bin"

pbdb <- merge(bin_info, stages, by = "bin")
pbdb <-pbdb %>%
  filter(is.na(occs)!= T)

pbdb$mid_ma <- (pbdb$max_ma + pbdb$min_ma)/2

a <- ggplot(pbdb, aes(x=mid_ma, y=SIBs)) + 
  geom_line() +
  scale_x_reverse() +
  theme_bw() +
  guides(fill=guide_legend(title="Grain size")) +
  ylab("Frequency") +
  xlab("Time (Ma)")
gggeo_scale(a)


pbdb2 <- Total %>%
  filter(is.na(Genus) != T)

bin_info <- binstat(pbdb2, tax="Genus", bin="bin_assignment", 
                    coll = 'Locality')
bin_info[bin_info==0] <- NA

colnames(bin_info)[1] <- "bin"

pbdb2 <- merge(bin_info, stages, by = "bin")
pbdb2 <-pbdb2 %>%
  filter(is.na(occs)!= T)

pbdb2$mid_ma <- (pbdb2$max_ma + pbdb2$min_ma)/2

a <- ggplot(pbdb2, aes(x=mid_ma, y=SIBs)) + 
  geom_line() +
  scale_x_reverse() +
  theme_bw() +
  guides(fill=guide_legend(title="Grain size")) +
  ylab("Frequency") +
  xlab("Time (Ma)") +
  geom_line(data = pbdb, aes(x=mid_ma, y = SIBs, colour = "red"))
gggeo_scale(a)

